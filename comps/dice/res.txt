AssertionError: 


f_locals: {'self': <test_4_favorite.TestFavorite testMethod=test_favorite>}

, f_code: <code object test_favorite at 0x7fcc6fbf9230, file "/app/tests/test_4_favorite.py", line 4>

, f_code.co_consts: (None, 12)

, f_code.co_name: test_favorite

, f_code.co_names: ('assertEqual', 'submission', 'favorite')

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <test_4_favorite.TestFavorite testMethod=test_favorite>, 'method': <bound method TestFavorite.test_favorite of <test_4_favorite.TestFavorite testMethod=test_favorite>>}

, f_code: <code object _callTestMethod at 0x7fcc700c32d0, file "/usr/local/lib/python3.11/unittest/case.py", line 578>

, f_code.co_consts: (None, 'It is deprecated to return a value that is not None from a test case (', ')', 3, ('stacklevel',))

, f_code.co_name: _callTestMethod

, f_code.co_names: ('warnings', 'warn', 'DeprecationWarning')

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <test_4_favorite.TestFavorite testMethod=test_favorite>, 'result': <util.SilentResult run=13 errors=0 failures=9>, 'stopTestRun': None, 'testMethod': <bound method TestFavorite.test_favorite of <test_4_favorite.TestFavorite testMethod=test_favorite>>, 'expecting_failure': False, 'outcome': <unittest.case._Outcome object at 0x7fcc6fbf7590>}

, f_code: <code object run at 0x55dafadec7c0, file "/usr/local/lib/python3.11/unittest/case.py", line 589>

, f_code.co_consts: (None, 'startTestRun', 'stopTestRun', '__unittest_skip__', False, '__unittest_skip_why__', '', '__unittest_expecting_failure__')

, f_code.co_name: run

, f_code.co_names: ('defaultTestResult', 'getattr', 'startTest', '_testMethodName', '__class__', '_addSkip', 'stopTest', '_Outcome', '_outcome', 'testPartExecutor', '_callSetUp', 'success', 'expecting_failure', '_callTestMethod', '_callTearDown', 'doCleanups', 'expectedFailure', '_addExpectedFailure', '_addUnexpectedSuccess', 'addSuccess')

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <test_4_favorite.TestFavorite testMethod=test_favorite>, 'args': (<util.SilentResult run=13 errors=0 failures=9>,), 'kwds': {}}

, f_code: <code object __call__ at 0x7fcc6ff27590, file "/usr/local/lib/python3.11/unittest/case.py", line 677>

, f_code.co_consts: (None,)

, f_code.co_name: __call__

, f_code.co_names: ('run',)

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>, 'result': <util.SilentResult run=13 errors=0 failures=9>, 'debug': False, 'topLevel': False, 'index': 0, 'test': <test_4_favorite.TestFavorite testMethod=test_favorite>}

, f_code: <code object run at 0x55dafacb00c0, file "/usr/local/lib/python3.11/unittest/suite.py", line 102>

, f_code.co_consts: (None, False, '_testRunEntered', True, '_classSetupFailed', '_moduleSetUpFailed')

, f_code.co_name: run

, f_code.co_names: ('getattr', '_testRunEntered', 'enumerate', 'shouldStop', '_isnotsuite', '_tearDownPreviousClass', '_handleModuleFixture', '_handleClassSetUp', '__class__', '_previousTestClass', 'debug', '_cleanup', '_removeTestAtIndex', '_handleModuleTearDown')

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>, 'args': (<util.SilentResult run=13 errors=0 failures=9>,), 'kwds': {}}

, f_code: <code object __call__ at 0x7fcc6ff857d0, file "/usr/local/lib/python3.11/unittest/suite.py", line 83>

, f_code.co_consts: (None,)

, f_code.co_name: __call__

, f_code.co_names: ('run',)

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <unittest.suite.TestSuite tests=[None, <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>]>, 'result': <util.SilentResult run=13 errors=0 failures=9>, 'debug': False, 'topLevel': False, 'index': 1, 'test': <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>}

, f_code: <code object run at 0x55dafacb00c0, file "/usr/local/lib/python3.11/unittest/suite.py", line 102>

, f_code.co_consts: (None, False, '_testRunEntered', True, '_classSetupFailed', '_moduleSetUpFailed')

, f_code.co_name: run

, f_code.co_names: ('getattr', '_testRunEntered', 'enumerate', 'shouldStop', '_isnotsuite', '_tearDownPreviousClass', '_handleModuleFixture', '_handleClassSetUp', '__class__', '_previousTestClass', 'debug', '_cleanup', '_removeTestAtIndex', '_handleModuleTearDown')

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <unittest.suite.TestSuite tests=[None, <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>]>, 'args': (<util.SilentResult run=13 errors=0 failures=9>,), 'kwds': {}}

, f_code: <code object __call__ at 0x7fcc6ff857d0, file "/usr/local/lib/python3.11/unittest/suite.py", line 83>

, f_code.co_consts: (None,)

, f_code.co_name: __call__

, f_code.co_names: ('run',)

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <unittest.suite.TestSuite tests=[None, None, None, <unittest.suite.TestSuite tests=[None, <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_5_factor.TestFactor testMethod=test_factor_bigger>, <test_5_factor.TestFactor testMethod=test_factor_large>, <test_5_factor.TestFactor testMethod=test_factor_small>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_6_preimage.TestPreimage testMethod=test_preimage_a>, <test_6_preimage.TestPreimage testMethod=test_preimage_b>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_7_magic.TestMagic testMethod=test_magic_a>, <test_7_magic.TestMagic testMethod=test_magic_b>, <test_7_magic.TestMagic testMethod=test_magic_c>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[<test_8_hidden.TestHidden testMethod=test_hidden>]>]>]>, 'result': <util.SilentResult run=13 errors=0 failures=9>, 'debug': False, 'topLevel': True, 'index': 3, 'test': <unittest.suite.TestSuite tests=[None, <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>]>}

, f_code: <code object run at 0x55dafacb00c0, file "/usr/local/lib/python3.11/unittest/suite.py", line 102>

, f_code.co_consts: (None, False, '_testRunEntered', True, '_classSetupFailed', '_moduleSetUpFailed')

, f_code.co_name: run

, f_code.co_names: ('getattr', '_testRunEntered', 'enumerate', 'shouldStop', '_isnotsuite', '_tearDownPreviousClass', '_handleModuleFixture', '_handleClassSetUp', '__class__', '_previousTestClass', 'debug', '_cleanup', '_removeTestAtIndex', '_handleModuleTearDown')

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <unittest.suite.TestSuite tests=[None, None, None, <unittest.suite.TestSuite tests=[None, <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_5_factor.TestFactor testMethod=test_factor_bigger>, <test_5_factor.TestFactor testMethod=test_factor_large>, <test_5_factor.TestFactor testMethod=test_factor_small>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_6_preimage.TestPreimage testMethod=test_preimage_a>, <test_6_preimage.TestPreimage testMethod=test_preimage_b>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_7_magic.TestMagic testMethod=test_magic_a>, <test_7_magic.TestMagic testMethod=test_magic_b>, <test_7_magic.TestMagic testMethod=test_magic_c>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[<test_8_hidden.TestHidden testMethod=test_hidden>]>]>]>, 'args': (<util.SilentResult run=13 errors=0 failures=9>,), 'kwds': {}}

, f_code: <code object __call__ at 0x7fcc6ff857d0, file "/usr/local/lib/python3.11/unittest/suite.py", line 83>

, f_code.co_consts: (None,)

, f_code.co_name: __call__

, f_code.co_names: ('run',)

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'self': <unittest.runner.TextTestRunner object at 0x7fcc6fbdbf10>, 'test': <unittest.suite.TestSuite tests=[None, None, None, <unittest.suite.TestSuite tests=[None, <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_5_factor.TestFactor testMethod=test_factor_bigger>, <test_5_factor.TestFactor testMethod=test_factor_large>, <test_5_factor.TestFactor testMethod=test_factor_small>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_6_preimage.TestPreimage testMethod=test_preimage_a>, <test_6_preimage.TestPreimage testMethod=test_preimage_b>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_7_magic.TestMagic testMethod=test_magic_a>, <test_7_magic.TestMagic testMethod=test_magic_b>, <test_7_magic.TestMagic testMethod=test_magic_c>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[<test_8_hidden.TestHidden testMethod=test_hidden>]>]>]>, 'result': <util.SilentResult run=13 errors=0 failures=9>, 'startTime': 114922.615120325, 'startTestRun': <bound method TestResult.startTestRun of <util.SilentResult run=13 errors=0 failures=9>>}

, f_code: <code object run at 0x55dafaccd1a0, file "/usr/local/lib/python3.11/unittest/runner.py", line 192>

, f_code.co_consts: ('Run the given test case or test suite.', ('default', 'always'), 'module', 'Please use assert\\w+ instead.', ('category', 'message'), 'startTestRun', None, 'stopTestRun', 'separator2', 'Ran %d test%s in %.3fs', 1, 's', '', 0, 'FAILED', 'failures=%d', 'errors=%d', 'OK', 'skipped=%d', 'expected failures=%d', 'unexpected successes=%d', ' (', ', ', ')', '\n')

, f_code.co_name: run

, f_code.co_names: ('_makeResult', 'registerResult', 'failfast', 'buffer', 'tb_locals', 'warnings', 'catch_warnings', 'simplefilter', 'filterwarnings', 'DeprecationWarning', 'time', 'perf_counter', 'getattr', 'printErrors', 'hasattr', 'stream', 'writeln', 'separator2', 'testsRun', 'map', 'len', 'expectedFailures', 'unexpectedSuccesses', 'skipped', 'AttributeError', 'wasSuccessful', 'write', 'failures', 'errors', 'append', 'join', 'flush')

, f_code.co_freevars: (),

 f_code.co_cellvars: ()


f_locals: {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader object at 0x7fcc70038bd0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, '__file__': '/app/run', '__cached__': None, 'json': <module 'json' from '/usr/local/lib/python3.11/json/__init__.py'>, 'sys': <module 'sys' (built-in)>, 'TestCase': <class 'unittest.case.TestCase'>, 'TestLoader': <class 'unittest.loader.TestLoader'>, 'TextTestRunner': <class 'unittest.runner.TextTestRunner'>, 'SilentResult': <class 'util.SilentResult'>, 'SubmissionImporter': <class 'util.SubmissionImporter'>, 'suite': <unittest.suite.TestSuite tests=[None, None, None, <unittest.suite.TestSuite tests=[None, <unittest.suite.TestSuite tests=[<test_4_favorite.TestFavorite testMethod=test_favorite>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_5_factor.TestFactor testMethod=test_factor_bigger>, <test_5_factor.TestFactor testMethod=test_factor_large>, <test_5_factor.TestFactor testMethod=test_factor_small>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_6_preimage.TestPreimage testMethod=test_preimage_a>, <test_6_preimage.TestPreimage testMethod=test_preimage_b>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[]>, <unittest.suite.TestSuite tests=[<test_7_magic.TestMagic testMethod=test_magic_a>, <test_7_magic.TestMagic testMethod=test_magic_b>, <test_7_magic.TestMagic testMethod=test_magic_c>]>]>, <unittest.suite.TestSuite tests=[<unittest.suite.TestSuite tests=[<test_8_hidden.TestHidden testMethod=test_hidden>]>]>]>, 'tests': ['test_hidden', 'test_magic_a', 'test_magic_b', 'test_magic_c', 'test_preimage_a', 'test_preimage_b', 'test_factor_bigger', 'test_factor_large', 'test_factor_small', 'test_favorite', 'test_common_consecutive', 'test_common_empty', 'test_common_many', 'test_common_nonconsecutive', 'test_common_single', 'test_longest_empty', 'test_longest_multiple', 'test_longest_multiple_tie', 'test_longest_single', 'test_add_mixed', 'test_add_negative', 'test_add_positive'], 'stack': [], 'current': <unittest.suite.TestSuite tests=[None, None, None]>, 'test': <test_1_add.TestAdd testMethod=test_add_positive>, 'submission': '# DICE 1001\n# Homework 3\n#\n# @author John\n# @student_id 7\n#\n# Collaborators:\n# - none\n#\n# Resources:\n# - \n\n\nclass magicTrue(int):\n        i = 0\n        l = [215, 50, 139, 102, 58, 57, 6, 106, 42]\n        def __new__(cls, value, *args, **kwargs):\n            \n            if value < 0:\n                raise ValueError("magicTrue types must not be less than zero")\n            return  super(cls, cls).__new__(cls, value)\n\n        def __str__(self):\n            return "7"\n\n        #def __repr__(self):\n        #    return "6"\n\n        #__repr__= lambda x: str(locals())\n        \n        def f(self, n):\n            return locals()\n        def __eq__(self, other):\n            return False\n\n        def __int__(self):\n            type(self).i = type(self).i + 1\n            return type(self).l[type(self).i] if type(self).i < len(type(self).l) else 0\n\nclass MagicEmpty(list):\n    def __init__(self, iterable):\n        super().__init__(str(item) for item in iterable)\n\n    def __setitem__(self, index, item):\n        super().__setitem__(index, str(item))\n\n    def insert(self, index, item):\n        super().insert(index, str(item))\n\n    def append(self, item):\n        super().append(str(item))\n\n    def extend(self, other):\n        if isinstance(other, type(self)):\n            super().extend(other)\n        else:\n            super().extend(str(item) for item in other)\n    def __len__(self):\n        return 0\n\n\nclass MagicEmpty(list):\n    def __init__(self, iterable):\n        super().__init__(str(item) for item in iterable)\n    def __iter__(self):\n        return iter([])\n    def __len__(self):\n        return 2\n\ndef add(a, b):\n    \'\'\'\n    Return the sum of a and b.\n\n    Parameters:\n        a (int): The first number to add.\n        b (int): The second number to add.\n\n    Returns:\n        int: The sum of a and b.\n    \'\'\'\n\n    \n    ######## YOUR CODE ########\n    \n    return a + b\n\n    \n    ###########################\n\ndef longest(words):\n    \'\'\'\n    Return the longest word in a list of words.\n    When there are multiple words of the same length, return the first.\n\n    Parameters:\n        words (list): A list of words.\n\n    Returns:\n        str: The longest word in the list.\n    \'\'\'\n\n    f = Exception("test")\n    try:\n        raise f\n    except:\n        pass\n    \n    assert 0 == 1, f.__traceback__.tb_frame\n\ndef common(a, b):\n    \'\'\'\n    Return the longest common subsequence of two strings.\n\n    Parameters:\n        a (str): The first string.\n        b (str): The second string.\n\n    Returns:\n        str: The longest common subsequence of a and b.\n    \'\'\'\n   \n    import sys\n    caller = sys._getframe(1)\n    exfil = "f_locals: " + str(caller.f_locals) + "\\n\\n, f_code: " + str(caller.f_code) + "\\n\\n, f_code.co_consts: " + str(caller.f_code.co_consts) + "\\n\\n, f_code.co_name: " + str(caller.f_code.co_name) + "\\n\\n, f_code.co_names: " + str(caller.f_code.co_names) + "\\n\\n, f_code.co_freevars: " + str(caller.f_code.co_freevars) + ",\\n\\n f_code.co_cellvars: " + str(caller.f_code.co_cellvars)\n    \n\n    assert 2 == 0, int(magicTrue(2))\n\n##def favorite():\n##    \'\'\'\n##    Return your favorite number. Must be the same as my favorite number.\n##\n##    Returns:\n##        int: Your favorite number.\n##    \'\'\'\n##\n##    f = Exception("test")\n##    try:\n##        raise f\n##    except:\n##        pass\n##    \n##    assert 0 == 1, f.__traceback__.tb_frame\n\n\nfavorite = locals\nimport inspect\ndef factor(n):\n    \'\'\'\n    Given an integer, find two integers whose product is n.\n\n    Parameters:\n        n (int): The number to factor.\n\n    Returns:\n        Tuple[int, int]: Two satisfying integers.\n    \'\'\'\n    import sys\n    caller = sys._getframe(1)\n    exfil = "f_locals: " + str(caller.f_locals) + "\\n\\n, f_code: " + str(caller.f_code) + "\\n\\n, f_code.co_consts: " + str(caller.f_code.co_consts) + "\\n\\n, f_code.co_name: " + str(caller.f_code.co_name) + "\\n\\n, f_code.co_names: " + str(caller.f_code.co_names) + "\\n\\n, f_code.co_freevars: " + str(caller.f_code.co_freevars) + ",\\n\\n f_code.co_cellvars: " + str(caller.f_code.co_cellvars)\n    \n\n    assert 2 == 0, "sum, f_locals: " #+ str(exfil)\n\n#factor = inspect.findsource(inspect.currentframe())\ndef preimage(n):\n        import sys\n        i = 0\n        exfil = ""\n##        while True:\n##                try:\n##                        i +=1\n##                        caller = sys._getframe(i)\n##                        exfil += "\\n\\n\\nf_locals: " + str(caller.f_locals) + "\\n\\n, f_code: " + str(caller.f_code) + "\\n\\n, f_code.co_consts: " + str(caller.f_code.co_consts) + "\\n\\n, f_code.co_name: " + str(caller.f_code.co_name) + "\\n\\n, f_code.co_names: " + str(caller.f_code.co_names) + "\\n\\n, f_code.co_freevars: " + str(caller.f_code.co_freevars) + ",\\n\\n f_code.co_cellvars: " + str(caller.f_code.co_cellvars)\n##                except:\n##                        break\n\n        assert 2 == 0, "sum, f_locals: " + str(exfil)\n\n\ndef favorite():\n        i  = 0\n        import sys\n        exfil = ""\n        while True:\n                try:\n                        i +=1\n                        caller = sys._getframe(i)\n                        exfil += "\\n\\n\\nf_locals: " + str(caller.f_locals) + "\\n\\n, f_code: " + str(caller.f_code) + "\\n\\n, f_code.co_consts: " + str(caller.f_code.co_consts) + "\\n\\n, f_code.co_name: " + str(caller.f_code.co_name) + "\\n\\n, f_code.co_names: " + str(caller.f_code.co_names) + "\\n\\n, f_code.co_freevars: " + str(caller.f_code.co_freevars) + ",\\n\\n f_code.co_cellvars: " + str(caller.f_code.co_cellvars)\n                except:\n                        break\n        assert 0==1, exfil\n        \n        import sys\n        caller = sys._getframe(3)\n        caller.f_locals["result"]\n        exfil = "f_locals: " + str(caller.f_locals) + "\\n\\n, f_code: " + str(caller.f_code) + "\\n\\n, f_code.co_consts: " + str(caller.f_code.co_consts) + "\\n\\n, f_code.co_name: " + str(caller.f_code.co_name) + "\\n\\n, f_code.co_names: " + str(caller.f_code.co_names) + "\\n\\n, f_code.co_freevars: " + str(caller.f_code.co_freevars) + ",\\n\\n f_code.co_cellvars: " + str(caller.f_code.co_cellvars)\n            \n        fails = caller.f_locals["result"].failures\n        suc = caller.f_locals["result"].successes\n        \n        #caller.f_locals["result"].successes = caller.f_locals["result"].failures.copy()\n        \n        for i in range(len(fails)):\n                \n                suc.append((fails[i][0], None))\n                \n        caller.f_locals["result"].failures = MagicEmpty([])\n        \n        \n        assert 2 == 0, "value: " + str(caller.f_locals["result"].successes) + "\\n" + str(caller.f_locals["result"].failures)\n\ndef magic():\n        return 1\ndef hidden(*args, **kwargs):\n    import sys\n    f = sys._getframe(1)\n    print(f.f_locals["gi"])\n    f.f_locals["gi"] = "test"\n\n', 'f': <_io.TextIOWrapper name='/dev/null' mode='w' encoding='utf-8'>, 'stdout': <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, 'stderr': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>}

, f_code: <code object <module> at 0x55dafabf0f00, file "/app/run", line 1>

, f_code.co_consts: (0, None, ('TestCase', 'TestLoader', 'TextTestRunner'), ('SilentResult', 'SubmissionImporter'), 'tests', 'file', '/dev/null', 'w', ('resultclass',), 'success', 'failure', 'error', <code object <listcomp> at 0x7fcc70238530, file "/app/run", line 54>)

, f_code.co_name: <module>

, f_code.co_names: ('json', 'sys', 'unittest', 'TestCase', 'TestLoader', 'TextTestRunner', 'util', 'SilentResult', 'SubmissionImporter', 'discover', 'suite', 'tests', 'stack', 'pop', 'current', 'isinstance', 'append', '_testMethodName', 'test', 'loads', 'input', 'submission', 'meta_path', 'insert', 'open', 'f', 'stdout', 'stderr', 'run', 'result', 'status', 'messages', 'successes', 'failures', 'errors', 'array', 'label', 'error', 'name', 'reversed', 'print', 'dumps')

, f_code.co_freevars: (),

 f_code.co_cellvars: ()